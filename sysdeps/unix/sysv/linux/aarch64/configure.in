GLIBC_PROVIDES dnl See aclocal.m4 in the top level source directory.
# Local configure fragment for sysdeps/unix/sysv/linux/aarch64.

arch_minimum_kernel=3.7.0
ldd_rewrite_script=$dir/ldd-rewrite.sed

test -n "$slibdir" ||
case "$prefix" in
  /usr | /usr/)
    case $machine in
    aarch64/ilp32)
      slibdir="/libilp32"
      AC_DEFINE(HAVE_AARCH64_ILP32)
      if test "$libdir" = '${exec_prefix}/lib'; then
        libdir='${exec_prefix}/libilp32';
        # Locale data can be shared between 32bit and 64bit libraries
        libc_cv_localedir='${exec_prefix}/lib/locale'
      fi
      ;;
    aarch64/lp64)
      slibdir="/lib64"
      if test "$libdir" = '${exec_prefix}/lib'; then
        libdir='${exec_prefix}/lib64';
        # Locale data can be shared between 32bit and 64bit libraries
        libc_cv_localedir='${exec_prefix}/lib/locale'
      fi
      ;;
    esac
    libc_cv_rtlddir="/lib"
    ;;
esac

# We check to see if the compiler and flags are
# selecting the big endian ABI and if they are then
# we set libc_cv_aarch64_be to yes which causes
# HAVE_AARCH64_BE to be defined in config.h and
# in include/libc-symbols.h and thus available to
# shlib-versions to select the appropriate name for
# the dynamic linker via %ifdef.
AC_CACHE_CHECK([for big endian],
  [libc_cv_aarch64_be],
  [AC_EGREP_CPP(yes,[#ifdef __AARCH64EB__
                      yes
                     #endif
  ], libc_cv_aarch64_be=yes, libc_cv_aarch64_be=no)])
if test $libc_cv_aarch64_be = yes; then
  AC_DEFINE(HAVE_AARCH64_BE)
  libc_aarch64_be=_be
else
  libc_aarch64_be=
fi

echo "default-abi := ${aarch64_config_abi}${libc_aarch64_be}" > default-abi.make
