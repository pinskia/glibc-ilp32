GLIBC_PROVIDES dnl See aclocal.m4 in the top level source directory.
# Local configure fragment for sysdeps/ia64.

AC_CACHE_CHECK(if -g produces usable source locations for assembler-with-cpp,
	       libc_cv_cpp_asm_debuginfo, [dnl
cat > conftest.S <<EOF
#include "confdefs.h"

/* comment on
   two lines */
	${libc_cv_dot_text}
	${libc_cv_asm_global_directive} foo
foo:
	/* Unfortunately this test only works for a real instruction,
	   not for any of the machine-independent pseudo-ops.
	   So we just have to assume everybody has a "nop".  */
	nop.b	0;;
	/* comment */
	nop.b	0;;
	/* comment */
	nop.b	0;;
EOF
if AC_TRY_COMMAND([${CC-cc} $CPPFLAGS $ASFLAGS -g -c conftest.S 1>&AS_MESSAGE_LOG_FD]) && {
   ac_pattern='conftest\.S'
   AC_TRY_COMMAND([readelf --debug-dump=line conftest.o |
		   grep $ac_pattern 1>&AS_MESSAGE_LOG_FD])
  }; then
  libc_cv_cpp_asm_debuginfo=yes
else
  libc_cv_cpp_asm_debuginfo=no
fi
rm -f conftest*])AC_SUBST(libc_cv_cpp_asm_debuginfo)
if test $libc_cv_cpp_asm_debuginfo = yes; then
  AC_DEFINE(HAVE_CPP_ASM_DEBUGINFO)
fi

# Check for support of thread-local storage handling in assembler and
# linker.
AC_CACHE_CHECK(for ia64 TLS support, libc_cv_ia64_tls, [dnl
cat > conftest.s <<\EOF
	.section ".tdata","awT",@progbits
foo:    data8   25
	.text
	addl    r16 = @ltoff(@dtpmod(foo#)), gp
	addl    r17 = @ltoff(@dtprel(foo#)), gp
	addl    r18 = @ltoff(@tprel(foo#)), gp
	addl    r19 = @dtprel(foo#), gp
	adds    r21 = @dtprel(foo#), r13
	movl    r23 = @dtprel(foo#)
	addl    r20 = @tprel(foo#), gp
	adds    r22 = @tprel(foo#), r13
	movl    r24 = @tprel(foo#)
EOF
dnl
if AC_TRY_COMMAND(${CC-cc} -c $CFLAGS conftest.s 1>&AS_MESSAGE_LOG_FD); then
  libc_cv_ia64_tls=yes
else
  libc_cv_ia64_tls=no
fi
rm -f conftest*])
if test $libc_cv_ia64_tls = no; then
  AC_MSG_ERROR([the assembler must support TLS])
fi

dnl It is always possible to access static and hidden symbols in an
dnl position independent way.
AC_DEFINE(PI_STATIC_AND_HIDDEN)
